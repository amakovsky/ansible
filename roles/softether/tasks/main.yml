---
- name: Include radius vars files
  include_vars:
    file: "{{ radius_conf }}"
    name: radius_var
  when: radius_conf is defined and radius_conf

- name: check exist softether
  stat:
    path: "{{ softether_bindir }}/{{ softether_srcdir }}"
  changed_when: false
  failed_when: false
  register: softether_available

- name: Install softether pre-requisites via apt
  apt:
    name: build-essential
    state: present

- name: ReInstall softether
  block:
    - name: stop vpnserver
      systemd:
        state: stopped
        name: vpnserver

    - name: delete softether folder
      file:
        path: "{{ softether_bindir }}"
        state: absent
        force: true
  when: softether_reinstall

- name: Install softether
  block:
    - name: create softether src folder
      file:
        path: "/tmp/{{item}}"
        state: directory
        mode: 0755
      with_items:
        - "{{ softether_srcdir }}"

    - name: create softether src folder
      file:
        path: "{{ softether_bindir }}"
        state: directory
        mode: 0755

    - name: Extract softether
      unarchive:
        src: "{{ softether_source_url }}"
        dest: "/tmp/{{ softether_srcdir }}"
        remote_src: true
        extra_opts: --strip-components=1

    - name: Build softether from tarball
      command: "{{ item }}"
      args:
        chdir: "/tmp/{{ softether_srcdir }}"
      with_items:
        - make i_read_and_agree_the_license_agreement
      notify: restart vpnserver

    - name: move softether to folder
      command: mv /tmp/{{ softether_srcdir }} {{ softether_bindir }}

    - name: Copy  softether config
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: 0775
      with_items: "{{ softether_config }}"
      notify: restart vpnserver

  when: softether_available.stat.exists == false or softether_reinstall

- name: Copy systemd softether config
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0775
  with_items: "{{ softether_template }}"
  register: add_tab
  notify: restart vpnserver

- name: start vpnserver
  systemd:
    state: started
    name: vpnserver

- name: netplan apply
  command: netplan apply
  when: add_tab is changed and ansible_distribution_release == 'bionic'

- name: networking apply
  systemd:
    state: restarted
    name: networking
  when: add_tab is changed and ansible_distribution_release != 'bionic'


