---
- name: check exist redis
  stat:
    path: "{{ redis_bindir }}/redis-server"
  changed_when: false
  failed_when: false
  register: redis_available

- name: Install required packet for build redis
  apt:
    name: "{{ redis_build_package }}"
    update_cache: true

- name: create  user redis
  user:
    name: "{{ redis_user }}"
    system: true
    createhome: false

- name: create redis folders
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ redis_user }}"
    group: "{{ redis_user }}"
    mode: 0755
  with_items:
    - "{{ redis_config_folder }}"
    - "{{ redis_log_folders }}"
    - "{{ redis_datadir }}"

- name: recriate redis cluster
  block:
    - name: stop redis sentinel
      systemd:
        state: stopped
        name: redis-sentinel

    - name: stop redis server
      systemd:
        state: stopped
        name: redis-server

    - name: Clear out data directory
      file:
        state: absent
        path: "{{ redis_datadir }}/"

    - name: create redis data folder
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ redis_user }}"
        group: "{{ redis_user }}"
        mode: 0755
      with_items:
        - "{{ redis_datadir }}"
      notify:
        - restart redis-server
        - restart redis-sentinel
  when: redis_available.stat.exists == true and recreate_cluster


- name: compile redis
  block:
    - name: create redis src folder
      file:
        path: "{{ redis_srcdir }}"
        state: directory
        mode: 0755

    - name: Download source
      get_url:
        url: "{{ redis_source_url }}"
        dest: /tmp/redis-stable.tar.gz
        mode: 0755

    - name: extract redis from archive
      unarchive:
        src: /tmp/redis-stable.tar.gz
        dest: "{{ redis_srcdir }}"
        remote_src: true
        extra_opts: --strip-components=1

    - name: build
      command: "{{ item }}"
      args:
        chdir: "{{ redis_srcdir }}"
      with_items:
        - make
        - make test
        - make install

    - name: copy configs
      command: cp {{ redis_srcdir }}/{{ item }} {{ redis_config_folder }}/{{ item }}  # && chown redis:redis {{ redis_config_folder }}/*
      with_items: "{{ redis_configs }}"
      become: true
      become_user: '{{ redis_user }}'
  when: redis_available.stat.exists == false

# - name: install redis
#  shell: echo -n | sudo utils/install_server.sh
#  args:
#    chdir: /tmp/redis-stable
#  when: redis_available.stat.exists == false

- name: redis configure global settings.
  lineinfile:
    dest: "/etc/redis/redis.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} {{ item.value }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ redis_global_config_options }}"
  when: redis_available.stat.exists == false or recreate_cluster
  notify: restart redis-server

- name: sentinel configure global settings.
  lineinfile:
    dest: "/etc/redis/sentinel.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} {{ item.value }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ sentinel_global_config_options }}"
  when: redis_available.stat.exists == false or recreate_cluster
  notify: restart redis-sentinel

- name: redis configure settings for slave.
  lineinfile:
    dest: "/etc/redis/redis.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} {{ item.value }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ redis_slave_config_options }}"
  notify: restart redis-server
  when: inventory_hostname != groups['redis'][0] and (redis_available.stat.exists == false or recreate_cluster)

- name: Copy systemd configuration
  template:
    src: "{{ item }}.service"
    dest: /etc/systemd/system/{{ item }}.service
  with_items:
    - redis-server
    - redis-sentinel

- name: set sysctl net.core.somaxconn
  sysctl:
    name: net.core.somaxconn
    value: 65535
    state: present
    reload: yes

- name: add a vm.overcommit_memory setting at the end of the sysctl.conf
  sysctl:
    name: vm.overcommit_memory
    value: 1
    state: present
    reload: yes
